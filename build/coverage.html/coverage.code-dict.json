{"/home/travis/build/npmtest/node-npmtest-pre-commit/test.js":"/* istanbul instrument in package npmtest_pre_commit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pre-commit/lib.npmtest_pre_commit.js":"/* istanbul instrument in package npmtest_pre_commit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pre_commit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pre_commit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pre-commit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pre-commit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pre_commit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pre_commit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pre_commit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pre_commit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pre_commit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pre_commit.__dirname + '/lib.npmtest_pre_commit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pre-commit/node_modules/pre-commit/index.js":"'use strict';\n\nvar spawn = require('cross-spawn')\n  , which = require('which')\n  , path = require('path')\n  , util = require('util')\n  , tty = require('tty');\n\n/**\n * Representation of a hook runner.\n *\n * @constructor\n * @param {Function} fn Function to be called when we want to exit\n * @param {Object} options Optional configuration, primarily used for testing.\n * @api public\n */\nfunction Hook(fn, options) {\n  if (!this) return new Hook(fn, options);\n  options = options || {};\n\n  this.options = options;     // Used for testing only. Ignore this. Don't touch.\n  this.config = {};           // pre-commit configuration from the `package.json`.\n  this.json = {};             // Actual content of the `package.json`.\n  this.npm = '';              // The location of the `npm` binary.\n  this.git = '';              // The location of the `git` binary.\n  this.root = '';             // The root location of the .git folder.\n  this.status = '';           // Contents of the `git status`.\n  this.exit = fn;             // Exit function.\n\n  this.initialize();\n}\n\n/**\n * Boolean indicating if we're allowed to output progress information into the\n * terminal.\n *\n * @type {Boolean}\n * @public\n */\nObject.defineProperty(Hook.prototype, 'silent', {\n  get: function silent() {\n    return !!this.config.silent;\n  }\n});\n\n/**\n * Boolean indicating if we're allowed and capable of outputting colors into the\n * terminal.\n *\n * @type {Boolean}\n * @public\n */\nObject.defineProperty(Hook.prototype, 'colors', {\n  get: function colors() {\n    return this.config.colors !== false && tty.isatty(process.stdout.fd);\n  }\n});\n\n/**\n * Execute a binary.\n *\n * @param {String} bin Binary that needs to be executed\n * @param {Array} args Arguments for the binary\n * @returns {Object}\n * @api private\n */\nHook.prototype.exec = function exec(bin, args) {\n  return spawn.sync(bin, args, {\n    stdio: 'pipe'\n  });\n};\n\n/**\n * Parse the package.json so we can create an normalize it's contents to\n * a usable configuration structure.\n *\n * @api private\n */\nHook.prototype.parse = function parse() {\n  var pre = this.json['pre-commit'] || this.json.precommit\n    , config = !Array.isArray(pre) && 'object' === typeof pre ? pre : {};\n\n  ['silent', 'colors', 'template'].forEach(function each(flag) {\n    var value;\n\n    if (flag in config) value = config[flag];\n    else if ('precommit.'+ flag in this.json) value = this.json['precommit.'+ flag];\n    else if ('pre-commit.'+ flag in this.json) value = this.json['pre-commit.'+ flag];\n    else return;\n\n    config[flag] = value;\n  }, this);\n\n  //\n  // The scripts we need to run can be set under the `run` property.\n  //\n  config.run = config.run || pre;\n\n  if ('string' === typeof config.run) config.run = config.run.split(/[, ]+/);\n  if (\n       !Array.isArray(config.run)\n    && this.json.scripts\n    && this.json.scripts.test\n    && this.json.scripts.test !== 'echo \"Error: no test specified\" && exit 1'\n  ) {\n    config.run = ['test'];\n  }\n\n  this.config = config;\n};\n\n/**\n * Write messages to the terminal, for feedback purposes.\n *\n * @param {Array} lines The messages that need to be written.\n * @param {Number} exit Exit code for the process.exit.\n * @api public\n */\nHook.prototype.log = function log(lines, exit) {\n  if (!Array.isArray(lines)) lines = lines.split('\\n');\n  if ('number' !== typeof exit) exit = 1;\n\n  var prefix = this.colors\n  ? '\\u001b[38;5;166mpre-commit:\\u001b[39;49m '\n  : 'pre-commit: ';\n\n  lines.push('');     // Whitespace at the end of the log.\n  lines.unshift('');  // Whitespace at the beginning.\n\n  lines = lines.map(function map(line) {\n    return prefix + line;\n  });\n\n  if (!this.silent) lines.forEach(function output(line) {\n    if (exit) console.error(line);\n    else console.log(line);\n  });\n\n  this.exit(exit, lines);\n  return exit === 0;\n};\n\n/**\n * Initialize all the values of the constructor to see if we can run as an\n * pre-commit hook.\n *\n * @api private\n */\nHook.prototype.initialize = function initialize() {\n  ['git', 'npm'].forEach(function each(binary) {\n    try { this[binary] = which.sync(binary); }\n    catch (e) {}\n  }, this);\n\n  //\n  // in GUI clients node and npm are not in the PATH so get node binary PATH,\n  // add it to the PATH list and try again.\n  //\n  if (!this.npm) {\n    try {\n      process.env.PATH += path.delimiter + path.dirname(process.env._);\n      this.npm = which.sync('npm');\n    } catch (e) {\n      return this.log(this.format(Hook.log.binary, 'npm'), 0);\n    }\n  }\n\n  //\n  // Also bail out if we cannot find the git binary.\n  //\n  if (!this.git) return this.log(this.format(Hook.log.binary, 'git'), 0);\n\n  this.root = this.exec(this.git, ['rev-parse', '--show-toplevel']);\n  this.status = this.exec(this.git, ['status', '--porcelain']);\n\n  if (this.status.code) return this.log(Hook.log.status, 0);\n  if (this.root.code) return this.log(Hook.log.root, 0);\n\n  this.status = this.status.stdout.toString().trim();\n  this.root = this.root.stdout.toString().trim();\n\n  try {\n    this.json = require(path.join(this.root, 'package.json'));\n    this.parse();\n  } catch (e) { return this.log(this.format(Hook.log.json, e.message), 0); }\n\n  //\n  // We can only check for changes after we've parsed the package.json as it\n  // contains information if we need to suppress the empty message or not.\n  //\n  if (!this.status.length && !this.options.ignorestatus) {\n    return this.log(Hook.log.empty, 0);\n  }\n\n  //\n  // If we have a git template we should configure it before checking for\n  // scripts so it will still be applied even if we don't have anything to\n  // execute.\n  //\n  if (this.config.template) {\n    this.exec(this.git, ['config', 'commit.template', '\"'+ this.config.template +'\"']);\n  }\n\n  if (!this.config.run) return this.log(Hook.log.run, 0);\n};\n\n/**\n * Run the specified hooks.\n *\n * @api public\n */\nHook.prototype.run = function runner() {\n  var hooked = this;\n\n  (function again(scripts) {\n    if (!scripts.length) return hooked.exit(0);\n\n    var script = scripts.shift();\n\n    //\n    // There's a reason on why we're using an async `spawn` here instead of the\n    // `shelljs.exec`. The sync `exec` is a hack that writes writes a file to\n    // disk and they poll with sync fs calls to see for results. The problem is\n    // that the way they capture the output which us using input redirection and\n    // this doesn't have the required `isAtty` information that libraries use to\n    // output colors resulting in script output that doesn't have any color.\n    //\n    spawn(hooked.npm, ['run', script, '--silent'], {\n      env: process.env,\n      cwd: hooked.root,\n      stdio: [0, 1, 2]\n    }).once('close', function closed(code) {\n      if (code) return hooked.log(hooked.format(Hook.log.failure, script, code));\n\n      again(scripts);\n    });\n  })(hooked.config.run.slice(0));\n};\n\n/**\n * Expose some of our internal tools so plugins can also re-use them for their\n * own processing.\n *\n * @type {Function}\n * @public\n */\nHook.prototype.format = util.format;\n\n/**\n * The various of error and status messages that we can output.\n *\n * @type {Object}\n * @private\n */\nHook.log = {\n  binary: [\n    'Failed to locate the `%s` binary, make sure it\\'s installed in your $PATH.',\n    'Skipping the pre-commit hook.'\n  ].join('\\n'),\n\n  status: [\n    'Failed to retrieve the `git status` from the project.',\n    'Skipping the pre-commit hook.'\n  ].join('\\n'),\n\n  root: [\n    'Failed to find the root of this git repository, cannot locate the `package.json`.',\n    'Skipping the pre-commit hook.'\n  ].join('\\n'),\n\n  empty: [\n    'No changes detected.',\n    'Skipping the pre-commit hook.'\n  ].join('\\n'),\n\n  json: [\n    'Received an error while parsing or locating the `package.json` file:',\n    '',\n    '  %s',\n    '',\n    'Skipping the pre-commit hook.'\n  ].join('\\n'),\n\n  run: [\n    'We have nothing pre-commit hooks to run. Either you\\'re missing the `scripts`',\n    'in your `package.json` or have configured pre-commit to run nothing.',\n    'Skipping the pre-commit hook.'\n  ].join('\\n'),\n\n  failure: [\n    'We\\'ve failed to pass the specified git pre-commit hooks as the `%s`',\n    'hook returned an exit code (%d). If you\\'re feeling adventurous you can',\n    'skip the git pre-commit hooks by adding the following flags to your commit:',\n    '',\n    '  git commit -n (or --no-verify)',\n    '',\n    'This is ill-advised since the commit is broken.'\n  ].join('\\n')\n};\n\n//\n// Expose the Hook instance so we can use it for testing purposes.\n//\nmodule.exports = Hook;\n\n//\n// Run directly if we're required executed directly through the CLI\n//\nif (module !== require.main) return;\n\nvar hook = new Hook(function cli(code) {\n  process.exit(code);\n});\n\nhook.run();\n","/home/travis/build/npmtest/node-npmtest-pre-commit/node_modules/pre-commit/install.js":"'use strict';\n\n//\n// Compatibility with older node.js as path.exists got moved to `fs`.\n//\nvar fs = require('fs')\n  , path = require('path')\n  , os = require('os')\n  , hook = path.join(__dirname, 'hook')\n  , root = path.resolve(__dirname, '..', '..')\n  , exists = fs.existsSync || path.existsSync;\n\n//\n// Gather the location of the possible hidden .git directory, the hooks\n// directory which contains all git hooks and the absolute location of the\n// `pre-commit` file. The path needs to be absolute in order for the symlinking\n// to work correctly.\n//\nvar git = path.resolve(root, '.git')\n  , hooks = path.resolve(git, 'hooks')\n  , precommit = path.resolve(hooks, 'pre-commit');\n\n//\n// Bail out if we don't have an `.git` directory as the hooks will not get\n// triggered. If we do have directory create a hooks folder if it doesn't exist.\n//\nif (!exists(git) || !fs.lstatSync(git).isDirectory()) return;\nif (!exists(hooks)) fs.mkdirSync(hooks);\n\n//\n// If there's an existing `pre-commit` hook we want to back it up instead of\n// overriding it and losing it completely as it might contain something\n// important.\n//\nif (exists(precommit) && !fs.lstatSync(precommit).isSymbolicLink()) {\n  console.log('pre-commit:');\n  console.log('pre-commit: Detected an existing git pre-commit hook');\n  fs.writeFileSync(precommit +'.old', fs.readFileSync(precommit));\n  console.log('pre-commit: Old pre-commit hook backuped to pre-commit.old');\n  console.log('pre-commit:');\n}\n\n//\n// We cannot create a symlink over an existing file so make sure it's gone and\n// finish the installation process.\n//\ntry { fs.unlinkSync(precommit); }\ncatch (e) {}\n\n// Create generic precommit hook that launches this modules hook (as well\n// as stashing - unstashing the unstaged changes)\n// TODO: we could keep launching the old pre-commit scripts\nvar hookRelativeUnixPath = hook.replace(root, '.');\n\nif(os.platform() === 'win32') {\n  hookRelativeUnixPath = hookRelativeUnixPath.replace(/[\\\\\\/]+/g, '/');\n}\n\nvar precommitContent = '#!/bin/bash' + os.EOL\n  +  hookRelativeUnixPath + os.EOL\n  + 'RESULT=$?' + os.EOL\n  + '[ $RESULT -ne 0 ] && exit 1' + os.EOL\n  + 'exit 0' + os.EOL;\n\n//\n// It could be that we do not have rights to this folder which could cause the\n// installation of this module to completely fail. We should just output the\n// error instead destroying the whole npm install process.\n//\ntry { fs.writeFileSync(precommit, precommitContent); }\ncatch (e) {\n  console.error('pre-commit:');\n  console.error('pre-commit: Failed to create the hook file in your .git/hooks folder because:');\n  console.error('pre-commit: '+ e.message);\n  console.error('pre-commit: The hook was not installed.');\n  console.error('pre-commit:');\n}\n\ntry { fs.chmodSync(precommit, '777'); }\ncatch (e) {\n  console.error('pre-commit:');\n  console.error('pre-commit: chmod 0777 the pre-commit file in your .git/hooks folder because:');\n  console.error('pre-commit: '+ e.message);\n  console.error('pre-commit:');\n}\n","/home/travis/build/npmtest/node-npmtest-pre-commit/node_modules/pre-commit/uninstall.js":"'use strict';\n\nvar fs = require('fs')\n  , path = require('path')\n  , exists = fs.existsSync || path.existsSync\n  , precommit = path.resolve(__dirname, '../..', '.git', 'hooks', 'pre-commit');\n\n//\n// Bail out if we don't have pre-commit file, it might be removed manually.\n//\nif (!exists(precommit)) return;\n\n//\n// If we don't have an old file, we should just remove the pre-commit hook. But\n// if we do have an old precommit file we want to restore that.\n//\nif (!exists(precommit +'.old')) {\n  fs.unlinkSync(precommit);\n} else {\n  fs.writeFileSync(precommit, fs.readFileSync(precommit +'.old'));\n  fs.chmodSync(precommit, '755');\n  fs.unlinkSync(precommit +'.old');\n}\n"}